
###############################################################################################
########### R code for JCGS paper 'Interquantile Shrikage in Regression Models' ###############
########### authors: Liewen Jiang, Huixia(Judy) Wang and Howard Bondell #######################

#global settings
tmpmax<- 100000
cachsz<- 64
maxiter<- 100
small<- 1e-08

#DAT = data matrix, with last column being th response, the first column is the intercept
#tau = quantiles of interest
#method = "FAL" or "FAS"
#tstar = tuning parameter

InterQR.fn<- function(DAT, tau, method, tstar) 
{
   p<- ncol(DAT)-2
   n<- nrow(DAT)
   k<- length(tau)
   X.dat<- DAT[,1:(p+1)]
   y.dat<- DAT[,(p+2)]
  
   #the conventional RQ method
   X.rq<- X.dat[,-1]  #don't need intercept for rq regression!
   rq.coef<- coef(rq(y.dat~X.rq,tau=tau))

   y <- -rep(y.dat,k)
   n1 <- length(y)
   u <- rep(1, length = n1)
   x1<- rep(1-tau, each=n)
   
   #design matrix P*%*%Q
   P<- matrix(0,nrow=k*n,ncol=k*(p+1))
   for (j in 1:(1+p))
   {
     P[1:(k*n),(k*(j-1)+1):(k*j)]<- cbind(diag(k)%x%X.dat[,j])
   }

   D1<- diag(k)
   D1[lower.tri(D1)]<- 1
   Q0<- cbind(diag(k), matrix(0,k,2*p*k))
   Q1<- cbind(matrix(0,p*k,k),diag(p)%x%(cbind(D1,-D1)))
   Q<- rbind(Q0,Q1)  #Q is the transformation matrix
   
   if (method == "FAL") 
     { 
       #adaptive weight
       wt<- NULL
       for ( l in 1:p )
         {
           wt<- c(wt,rep(c(0,1/abs(diff(rq.coef[l+1,]))),2))
        }
        #wt<- rep(c(0, rep(1, k-1)), 2*p)
         
       #constraint matrix R
       R1<- c(rep(0,k),-wt)
       R2<- cbind(matrix(0,2*p*k,k),diag(2*p*k))
     
       R3.1<- diff(diag(k))
       R3.2<- cbind(matrix(0,nrow=k-1,ncol=k),cbind(0,-diag(k-1)))
   
       R3<- NULL
       for ( jj in 1:p )
         {
           R3<- cbind(R3, R3.2)
         }
   
      R4<- cbind( R3.1, R3 )
      R.con<- rbind(R1,R2,R4)
      R<- as.matrix.csr(R.con)

      x.design<- P%*%Q
      x<- as.matrix.csr(x.design)
   
     #some settings in Fortran function
     rhs<- t(x)%*%rep(1-tau, each=n)    #rhs for dual
   
     m <- x@dimension[2]
     if (n1 != x@dimension[1])
       stop("The design matrix A1' and response vector y are not
compatible")
        

     wwm <- vector("numeric", 6 * m)
     wwm[1:m] <- rhs
     nnzx <- x@ia[x@dimension[1] + 1] - 1

     nnzR <- R@ia[R@dimension[1] + 1] - 1
     nnzdmax <- max(nnzx, nnzR)
     iwmax <- 7 * m + 3
     ao1 <- t(x)
     ao2 <- t(R)
     e <- ao1 %*% x
     g <- ao2 %*% R
     h <- e + g
     nnzemax <- e@ia[e@dimension[1] + 1] - 1
     nnzgmax <- g@ia[g@dimension[1] + 1] - 1
     nnzhmax <- h@ia[h@dimension[1] + 1] - 1
     nnzlmax <- 4 * nnzdmax
     nsubmax <- nnzhmax

     s <- u - x1
     chol.o <- chol(e,tmpmax=tmpmax)
     b <- backsolve(chol.o, ao1 %*% y)
     r1 <- y - x %*% b


     z1 <- ifelse(abs(r1) < small, (r1 * (r1 > 0) + small), r1 * (r1 > 0))
     w <- z1 - r1

     wwn1 <- matrix(0, n1, 10)
     wwn1[, 1] <- z1
     wwn1[, 2] <- w

     r<- c(tstar,rep(0,2*p*k+(k-1)))  #rhs of the constraint
     n2<- length(r)
     if (n2!=R@dimension[1])
      stop("The constraint matrix A2 and the constraint right-hand-side are not compatible")
     maxn1n2<- max(n1,n2)
     x2<- rep(1,length=n2)  #?x2=z2?
     z2<- rep(1,n2)
     wwn2<- matrix(0,n2,7)
     wwn2[,2]<- z2

     srqfnc.o.FAL <- .Fortran("srqfnc", n1 = as.integer(n1), m = as.integer(m),
       nnzx = as.integer(nnzx), x = as.double(x@ra), jx = as.integer(x@ja),
       ix = as.integer(x@ia), ao1 = as.double(ao1@ra), jao1 =
as.integer(ao1@ja),
       iao1 = as.integer(ao1@ia), n2 = as.integer(n2), nnzR =
as.integer(nnzR),
       R = as.double(R@ra), jR = as.integer(R@ja), iR = as.integer(R@ia),
       ao2 = as.double(ao2@ra), jao2 = as.integer(ao2@ja), iao2 =
as.integer(ao2@ia),
       nnzdmax = as.integer(nnzdmax), d = double(nnzdmax), jd =
integer(nnzdmax),
       id = integer(m + 1), dsub = double(nnzhmax + 1), jdsub =
integer(nnzhmax + 1), nnzemax = as.integer(nnzemax), e =
as.double(e@ra),
       je = as.integer(e@ja), ie = as.integer(e@ia), nnzgmax =
as.integer(nnzgmax),
       g = double(nnzgmax), jg = integer(nnzgmax), ig = integer(m + 1),
nnzhmax = as.integer(nnzhmax), h = double(nnzhmax),
       jh = integer(nnzhmax), ih = integer(m + 1), nsubmax =
as.integer(nsubmax),
       lindx = integer(nsubmax), xlindx = integer(m + 1), nnzlmax =
as.integer(nnzlmax),
       lnz = double(nnzlmax), xlnz = integer(m + 1), iw = integer(m * 5),
iwmax = as.integer(iwmax), iwork = integer(iwmax),
       xsuper = integer(m + 1), tmpmax = as.integer(tmpmax),
       tmpvec = double(tmpmax), maxn1n2 = as.integer(maxn1n2),
       ww1 = double(maxn1n2), wwm = as.double(wwm), wwn1 = as.double(wwn1),
       wwn2 = as.double(wwn2), cachsz = as.integer(cachsz),
       level = as.integer(8), x1 = as.double(x1), x2 = as.double(x2),
       s = as.double(s), u = as.double(u), c1 = as.double(y),
       c2 = as.double(r), sol = as.double(b), small = as.double(small),
       ierr = integer(1), maxiter = as.integer(maxiter), time = double(7),
       PACKAGE = "quantreg")[c("sol", "ierr", "maxiter", "time")]
       coef = Q%*%(-srqfnc.o.FAL$sol)
       #coef = round(-srqfnc.o$sol,4)  #you can also take rounding
       coef.max = matrix(coef, byrow=T, ncol=k)
       return(coef.max)    #return quantile intercepts and quantile slope coefficients 
       } 
       else {        #For FAS method
   
       #adaptive weights max(r_k) from rq
       if (p==1) {wt<- 1/max(abs(diff(rq.coef[-1,]))) } else {
          wt<- apply(rq.coef[-1,],1,function(x) {1/max(abs(diff(x)))} ) } 
       
       #wt<- rep(1,p) #FS without adaptive weights
          
       Q.tmp<- cbind(Q, matrix(0, k*(p+1), p))
       Q.max<- rbind(Q.tmp, cbind(matrix(0,p,k*(2*p+1)),diag(p))) #transform matrix                    

       P.max<- cbind(P,matrix(0,n*k,p))
       x.design.max<- P.max%*%Q.max
       x<- as.matrix.csr(x.design.max)
       
      #constraint matrix R--global
      R1<- c(rep(0,k*(2*p+1)),-wt)
      D.tmp<- cbind(rep(0,k-1),-diag(k-1))
      D2<- cbind(D.tmp,D.tmp)
      R2<- cbind(matrix(0,p*(k-1),k),diag(p)%x%D2,diag(p)%x%rep(1,k-1))
      R3<- cbind(matrix(0,2*p*k,k),diag(2*p*k),matrix(0,2*p*k,p))
   
      R4.1<- diff(diag(k))
      R4.2<- cbind(matrix(0,nrow=k-1,ncol=k),cbind(0,-diag(k-1)))
   
      R4<- NULL
      for ( jj in 1:p )
       {
         R4<- cbind(R4, R4.2)
       }
   
      R5<- cbind( R4.1, R4, matrix(0,k-1,p) )
      R.con<- rbind(R1,R2,R3,R5)
      R<- as.matrix.csr(R.con)   #primal constraint matrix

      #some settings in Fortran functions
      rhs<- t(x)%*%rep(1-tau, each=n)    #rhs for dual

      m <- x@dimension[2]
      if (n1 != x@dimension[1])
       stop("The design matrix A1' and response vector y are not compatible")


      wwm <- vector("numeric", 6 * m)
      wwm[1:m] <- rhs
      nnzx <- x@ia[x@dimension[1] + 1] - 1

      nnzR <- R@ia[R@dimension[1] + 1] - 1
      nnzdmax <- max(nnzx, nnzR)
      iwmax <- 7 * m + 3
      ao1 <- t(x)
      ao2 <- t(R)
      e <- ao1 %*% x
      g <- ao2 %*% R
      h <- e + g
      nnzemax <- e@ia[e@dimension[1] + 1] - 1
      nnzgmax <- g@ia[g@dimension[1] + 1] - 1
      nnzhmax <- h@ia[h@dimension[1] + 1] - 1
      nnzlmax <- 4 * nnzdmax
      nsubmax <- nnzhmax

      s <- u - x1
      chol.o <- chol(e,tmpmax=tmpmax)
      b <- backsolve(chol.o, ao1 %*% y)
      r1 <- y - x %*% b

      z1 <- ifelse(abs(r1) < small, (r1 * (r1 > 0) + small), r1 * (r1 > 0))
      w <- z1 - r1

      wwn1 <- matrix(0, n1, 10)
      wwn1[, 1] <- z1
      wwn1[, 2] <- w

      #rhs of the constraint
      r<- c(tstar,rep(0,p*(k-1)+2*p*k+(k-1)))
      n2<- length(r)
      if (n2!=R@dimension[1])
       stop("The constraint matrix A2 and the constraint right-hand-side are not compatible")
      maxn1n2<- max(n1,n2)
      x2<- rep(1,length=n2)  
      z2<- rep(1,n2)
      wwn2<- matrix(0,n2,7)
      wwn2[,2]<- z2

      srqfnc.o.FAS <- .Fortran("srqfnc", n1 = as.integer(n1), m = as.integer(m),
       nnzx = as.integer(nnzx), x = as.double(x@ra), jx = as.integer(x@ja),
       ix = as.integer(x@ia), ao1 = as.double(ao1@ra), jao1 =
as.integer(ao1@ja),
       iao1 = as.integer(ao1@ia), n2 = as.integer(n2), nnzR =
as.integer(nnzR),
       R = as.double(R@ra), jR = as.integer(R@ja), iR = as.integer(R@ia),
       ao2 = as.double(ao2@ra), jao2 = as.integer(ao2@ja), iao2 =
as.integer(ao2@ia),
       nnzdmax = as.integer(nnzdmax), d = double(nnzdmax), jd =
integer(nnzdmax),
       id = integer(m + 1), dsub = double(nnzhmax + 1), jdsub =
integer(nnzhmax + 1), nnzemax = as.integer(nnzemax), e =
as.double(e@ra),
       je = as.integer(e@ja), ie = as.integer(e@ia), nnzgmax =
as.integer(nnzgmax),
       g = double(nnzgmax), jg = integer(nnzgmax), ig = integer(m + 1),
nnzhmax = as.integer(nnzhmax), h = double(nnzhmax),
       jh = integer(nnzhmax), ih = integer(m + 1), nsubmax =
as.integer(nsubmax),
       lindx = integer(nsubmax), xlindx = integer(m + 1), nnzlmax =
as.integer(nnzlmax),
       lnz = double(nnzlmax), xlnz = integer(m + 1), iw = integer(m * 5),
iwmax = as.integer(iwmax), iwork = integer(iwmax),
       xsuper = integer(m + 1), tmpmax = as.integer(tmpmax),
       tmpvec = double(tmpmax), maxn1n2 = as.integer(maxn1n2),
       ww1 = double(maxn1n2), wwm = as.double(wwm), wwn1 = as.double(wwn1),
       wwn2 = as.double(wwn2), cachsz = as.integer(cachsz),
       level = as.integer(8), x1 = as.double(x1), x2 = as.double(x2),
       s = as.double(s), u = as.double(u), c1 = as.double(y),
       c2 = as.double(r), sol = as.double(b), small = as.double(small),
       ierr = integer(1), maxiter = as.integer(maxiter), time = double(7),
       PACKAGE = "quantreg")[c("sol", "ierr", "maxiter", "time")]
       coef = (Q.max%*%(-srqfnc.o.FAS$sol))[1:(k+p*k)]
       coef.max = matrix(coef, byrow=T, ncol=k)
       #coef = round(-srqfnc.o$sol,4)  #you can also take rounding
       return(coef.max)    #return quantile intercepts and quantile slope coefficients
   }
}




############################### Tuning Parameter Selection ####################
#DAT = data matrix, with last column being th response, the first column is the intercept                          
#coef.max: quantile intercepts and slope coefficients, in a matrix form, each row contains k quantile levels
#dec: decimal places for rounding when we count zero interquantile differences
#tau: quantiles of interest

Tun.Sel<- function( DAT, tstar, coef.matrix, dec=4, tau ) 
{               
   p<- ncol(DAT)-2
   n<- nrow(DAT)
   x<- DAT[,1:(p+1)]
   y<- DAT[,(p+2)]     
   #coef.matrix<- as.matrix(InterQR.fn(DAT,tau, method=method, tstar=tstar))
   tau.matrix<- matrix(rep(tau,n),nrow=n,ncol=k,byrow=T)
   res<- y-x%*%coef.matrix
   res.positive<- pmax(res,0)
   res.negative<- -pmin(res,0)    
   QR.loss<- apply(res.positive*tau.matrix+res.negative*(1-tau.matrix),2,sum)       # quantile loss
   if (p==1)  { interQR.d<- diff(coef.matrix[-1,]) } else {
           interQR.d<- apply(coef.matrix[-1,], 1, diff) }      #interquantile differences, each row is for one predictor
   d.zero<- sum(round(interQR.d, dec)==0)   #count zero differences
   bic.aic<- sum(log(QR.loss))+(1/n)*((p+1)*k-d.zero)  #AIC criterion
   #bic.aic<- sum(log(QR.loss))+(log(n)/(2*n))*((p+1)*k-d.zero)  #BIC criterion
   return(bic.aic)
 }  
    

    
    
    
    
    
